'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.splitHead = splitHead;
exports.unquote = unquote;
exports.format = format;
exports.formatAttributes = formatAttributes;
function splitHead(str, sep) {
  var idx = str.indexOf(sep);
  if (idx === -1) return [str];
  return [str.slice(0, idx), str.slice(idx + sep.length)];
}

function unquote(str) {
  var car = str.charAt(0);
  var end = str.length - 1;
  var isQuoteStart = car === '"' || car === "'";
  if (isQuoteStart && car === str.charAt(end)) {
    return str.slice(1, end);
  }
  return str;
}

function format(nodes, options) {
  return nodes.map(function (node) {
    var type = node.type;
    if (type === 'element') {
      var tagName = node.tagName.toLowerCase();
      var name = options.supportTags.indexOf(tagName) >= 0 ? tagName : 'div';
      var attributes = formatAttributes(node.attributes);
      var children = format(node.children, options);
      return { type: 'node', name: name, attrs: attributes, children: children };
    }

    if (type === 'text') {
      return { type: 'text', text: node.content };
    }
    return null;
  }).filter(function (i) {
    return i;
  });
  // 小程序只支持 node 和 text节点. comment要过滤掉
}

function formatAttributes(attributes) {
  var attrs = {};
  attributes.map(function (attribute) {
    var parts = splitHead(attribute.trim(), '=');
    var key = parts[0];
    var value = typeof parts[1] === 'string' ? unquote(parts[1]) : null;
    if (key === 'style' || key === 'class' || key === 'src') {
      attrs[key] = value;
    }
    return { key: key, value: value };
  });
  return attrs;
}
//# sourceMappingURL=format.js.map
