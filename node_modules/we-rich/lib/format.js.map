{"version":3,"sources":["format.js"],"names":["splitHead","unquote","format","formatAttributes","str","sep","idx","indexOf","slice","length","car","charAt","end","isQuoteStart","nodes","options","map","type","node","tagName","toLowerCase","name","supportTags","attributes","children","attrs","text","content","filter","i","parts","attribute","trim","key","value"],"mappings":";;;;;QAAgBA,S,GAAAA,S;QAMAC,O,GAAAA,O;QAUAC,M,GAAAA,M;QAsBAC,gB,GAAAA,gB;AAtCT,SAASH,SAAT,CAAoBI,GAApB,EAAyBC,GAAzB,EAA8B;AACnC,MAAMC,MAAMF,IAAIG,OAAJ,CAAYF,GAAZ,CAAZ;AACA,MAAIC,QAAQ,CAAC,CAAb,EAAgB,OAAO,CAACF,GAAD,CAAP;AAChB,SAAO,CAACA,IAAII,KAAJ,CAAU,CAAV,EAAaF,GAAb,CAAD,EAAoBF,IAAII,KAAJ,CAAUF,MAAMD,IAAII,MAApB,CAApB,CAAP;AACD;;AAEM,SAASR,OAAT,CAAkBG,GAAlB,EAAuB;AAC5B,MAAMM,MAAMN,IAAIO,MAAJ,CAAW,CAAX,CAAZ;AACA,MAAMC,MAAMR,IAAIK,MAAJ,GAAa,CAAzB;AACA,MAAMI,eAAeH,QAAQ,GAAR,IAAeA,QAAQ,GAA5C;AACA,MAAIG,gBAAgBH,QAAQN,IAAIO,MAAJ,CAAWC,GAAX,CAA5B,EAA6C;AAC3C,WAAOR,IAAII,KAAJ,CAAU,CAAV,EAAaI,GAAb,CAAP;AACD;AACD,SAAOR,GAAP;AACD;;AAEM,SAASF,MAAT,CAAiBY,KAAjB,EAAwBC,OAAxB,EAAiC;AACtC,SAAOD,MACJE,GADI,CACA,gBAAQ;AACX,QAAMC,OAAOC,KAAKD,IAAlB;AACA,QAAIA,SAAS,SAAb,EAAwB;AACtB,UAAME,UAAUD,KAAKC,OAAL,CAAaC,WAAb,EAAhB;AACA,UAAMC,OACJN,QAAQO,WAAR,CAAoBf,OAApB,CAA4BY,OAA5B,KAAwC,CAAxC,GAA4CA,OAA5C,GAAsD,KADxD;AAEA,UAAMI,aAAapB,iBAAiBe,KAAKK,UAAtB,CAAnB;AACA,UAAMC,WAAWtB,OAAOgB,KAAKM,QAAZ,EAAsBT,OAAtB,CAAjB;AACA,aAAO,EAAEE,MAAM,MAAR,EAAgBI,MAAMA,IAAtB,EAA4BI,OAAOF,UAAnC,EAA+CC,kBAA/C,EAAP;AACD;;AAED,QAAIP,SAAS,MAAb,EAAqB;AACnB,aAAO,EAAEA,MAAM,MAAR,EAAgBS,MAAMR,KAAKS,OAA3B,EAAP;AACD;AACD,WAAO,IAAP;AACD,GAhBI,EAiBJC,MAjBI,CAiBG;AAAA,WAAKC,CAAL;AAAA,GAjBH,CAAP;AAkBA;AACD;;AAEM,SAAS1B,gBAAT,CAA2BoB,UAA3B,EAAuC;AAC5C,MAAIE,QAAQ,EAAZ;AACAF,aAAWP,GAAX,CAAe,qBAAa;AAC1B,QAAMc,QAAQ9B,UAAU+B,UAAUC,IAAV,EAAV,EAA4B,GAA5B,CAAd;AACA,QAAMC,MAAMH,MAAM,CAAN,CAAZ;AACA,QAAMI,QAAQ,OAAOJ,MAAM,CAAN,CAAP,KAAoB,QAApB,GAA+B7B,QAAQ6B,MAAM,CAAN,CAAR,CAA/B,GAAmD,IAAjE;AACA,QAAIG,QAAQ,OAAR,IAAmBA,QAAQ,OAA3B,IAAsCA,QAAQ,KAAlD,EAAyD;AACvDR,YAAMQ,GAAN,IAAaC,KAAb;AACD;AACD,WAAO,EAAED,QAAF,EAAOC,YAAP,EAAP;AACD,GARD;AASA,SAAOT,KAAP;AACD","file":"format.js","sourcesContent":["export function splitHead (str, sep) {\n  const idx = str.indexOf(sep)\n  if (idx === -1) return [str]\n  return [str.slice(0, idx), str.slice(idx + sep.length)]\n}\n\nexport function unquote (str) {\n  const car = str.charAt(0)\n  const end = str.length - 1\n  const isQuoteStart = car === '\"' || car === \"'\"\n  if (isQuoteStart && car === str.charAt(end)) {\n    return str.slice(1, end)\n  }\n  return str\n}\n\nexport function format (nodes, options) {\n  return nodes\n    .map(node => {\n      const type = node.type\n      if (type === 'element') {\n        const tagName = node.tagName.toLowerCase()\n        const name =\n          options.supportTags.indexOf(tagName) >= 0 ? tagName : 'div'\n        const attributes = formatAttributes(node.attributes)\n        const children = format(node.children, options)\n        return { type: 'node', name: name, attrs: attributes, children }\n      }\n\n      if (type === 'text') {\n        return { type: 'text', text: node.content }\n      }\n      return null\n    })\n    .filter(i => i)\n  // 小程序只支持 node 和 text节点. comment要过滤掉\n}\n\nexport function formatAttributes (attributes) {\n  let attrs = {}\n  attributes.map(attribute => {\n    const parts = splitHead(attribute.trim(), '=')\n    const key = parts[0]\n    const value = typeof parts[1] === 'string' ? unquote(parts[1]) : null\n    if (key === 'style' || key === 'class' || key === 'src') {\n      attrs[key] = value\n    }\n    return { key, value }\n  })\n  return attrs\n}\n"]}