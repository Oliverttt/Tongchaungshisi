{"version":3,"sources":["stringify.js"],"names":["formatAttributes","toHTML","attrs","attrsArray","k","push","key","value","reduce","attribute","quoteEscape","indexOf","quote","tree","options","map","node","type","text","name","children","isSelfClosing","voidTags","toLowerCase","join"],"mappings":";;;;;QAEgBA,gB,GAAAA,gB;QAgBAC,M,GAAAA,M;;AAlBhB;;AAEO,SAASD,gBAAT,CAA2BE,KAA3B,EAAkC;AACvC,MAAIC,aAAa,EAAjB;AACA,OAAK,IAAIC,CAAT,IAAcF,KAAd,EAAqB;AACnBC,eAAWE,IAAX,CAAgB,EAAEC,KAAKF,CAAP,EAAUG,OAAOL,MAAME,CAAN,CAAjB,EAAhB;AACD;AACD,SAAOD,WAAWK,MAAX,CAAkB,UAACN,KAAD,EAAQO,SAAR,EAAsB;AAAA,QACrCH,GADqC,GACtBG,SADsB,CACrCH,GADqC;AAAA,QAChCC,KADgC,GACtBE,SADsB,CAChCF,KADgC;;AAE7C,QAAIA,UAAU,IAAd,EAAoB;AAClB,aAAUL,KAAV,SAAmBI,GAAnB;AACD;AACD,QAAMI,cAAcH,MAAMI,OAAN,CAAc,GAAd,MAAuB,CAAC,CAA5C;AACA,QAAMC,QAAQF,cAAc,GAAd,GAAoB,GAAlC;AACA,WAAUR,KAAV,SAAmBI,GAAnB,SAA0BM,KAA1B,GAAkCL,KAAlC,GAA0CK,KAA1C;AACD,GARM,EAQJ,EARI,CAAP;AASD;;AAEM,SAASX,MAAT,CAAiBY,IAAjB,EAAuBC,OAAvB,EAAgC;AACrC,SAAOD,KACJE,GADI,CACA,gBAAQ;AACX,QAAIC,KAAKC,IAAL,KAAc,MAAlB,EAA0B;AACxB,aAAOD,KAAKE,IAAZ;AACD;AACD,QAAIF,KAAKC,IAAL,KAAc,SAAlB,EAA6B;AAC3B,sBAAcD,KAAKE,IAAnB;AACD;AANU,QAOHC,IAPG,GAOuBH,IAPvB,CAOHG,IAPG;AAAA,QAOGjB,KAPH,GAOuBc,IAPvB,CAOGd,KAPH;AAAA,QAOUkB,QAPV,GAOuBJ,IAPvB,CAOUI,QAPV;;AAQX,QAAMC,gBAAgB,2BAAcP,QAAQQ,QAAtB,EAAgCH,KAAKI,WAAL,EAAhC,CAAtB;AACA,WAAOF,sBACCF,IADD,GACQnB,iBAAiBE,KAAjB,CADR,eAECiB,IAFD,GAEQnB,iBAAiBE,KAAjB,CAFR,SAEmCD,OACpCmB,QADoC,EAEpCN,OAFoC,CAFnC,UAKGK,IALH,MAAP;AAMD,GAhBI,EAiBJK,IAjBI,CAiBC,EAjBD,CAAP;AAkBD;;kBAEc,EAAEvB,cAAF,E","file":"stringify.js","sourcesContent":["import { arrayIncludes } from './compat'\n\nexport function formatAttributes (attrs) {\n  var attrsArray = []\n  for (var k in attrs) {\n    attrsArray.push({ key: k, value: attrs[k] })\n  }\n  return attrsArray.reduce((attrs, attribute) => {\n    const { key, value } = attribute\n    if (value === null) {\n      return `${attrs} ${key}`\n    }\n    const quoteEscape = value.indexOf(\"'\") !== -1\n    const quote = quoteEscape ? '\"' : \"'\"\n    return `${attrs} ${key}=${quote}${value}${quote}`\n  }, '')\n}\n\nexport function toHTML (tree, options) {\n  return tree\n    .map(node => {\n      if (node.type === 'text') {\n        return node.text\n      }\n      if (node.type === 'comment') {\n        return `<!--${node.text}-->`\n      }\n      const { name, attrs, children } = node\n      const isSelfClosing = arrayIncludes(options.voidTags, name.toLowerCase())\n      return isSelfClosing\n        ? `<${name}${formatAttributes(attrs)}>`\n        : `<${name}${formatAttributes(attrs)}>${toHTML(\n            children,\n            options\n          )}</${name}>`\n    })\n    .join('')\n}\n\nexport default { toHTML }\n"]}