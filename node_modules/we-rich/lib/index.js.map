{"version":3,"sources":["index.js"],"names":["parse","stringify","parseDefaults","voidTags","closingTags","childlessTags","supportTags","closingTagAncestorBreakers","str","options","tokens","nodes","ast"],"mappings":";;;;;;QAoBgBA,K,GAAAA,K;QAMAC,S,GAAAA,S;;AA1BhB;;;;AACA;;;;AACA;;AACA;;AACA;;;;AAQO,IAAMC,wCAAgB;AAC3BC,0BAD2B;AAE3BC,gCAF2B;AAG3BC,oCAH2B;AAI3BC,gCAJ2B;AAK3BC;AAL2B,CAAtB;;AAQA,SAASP,KAAT,CAAgBQ,GAAhB,EAA8C;AAAA,MAAzBC,OAAyB,uEAAfP,aAAe;;AACnD,MAAMQ,SAAS,qBAAMF,GAAN,EAAWC,OAAX,CAAf;AACA,MAAME,QAAQ,sBAAOD,MAAP,EAAeD,OAAf,CAAd;AACA,SAAO,oBAAOE,KAAP,EAAcF,OAAd,CAAP;AACD;;AAEM,SAASR,SAAT,CAAoBW,GAApB,EAAkD;AAAA,MAAzBH,OAAyB,uEAAfP,aAAe;;AACvD,SAAO,uBAAOU,GAAP,EAAYH,OAAZ,CAAP;AACD","file":"index.js","sourcesContent":["import lexer from './lexer'\nimport parser from './parser'\nimport { format } from './format'\nimport { toHTML } from './stringify'\nimport {\n  voidTags,\n  closingTags,\n  childlessTags,\n  supportTags,\n  closingTagAncestorBreakers\n} from './tags'\n\nexport const parseDefaults = {\n  voidTags,\n  closingTags,\n  childlessTags,\n  supportTags,\n  closingTagAncestorBreakers\n}\n\nexport function parse (str, options = parseDefaults) {\n  const tokens = lexer(str, options)\n  const nodes = parser(tokens, options)\n  return format(nodes, options)\n}\n\nexport function stringify (ast, options = parseDefaults) {\n  return toHTML(ast, options)\n}\n"]}